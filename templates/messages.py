import os
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

class BotMessages:
    INCOME = {
        'start': 'üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≤–≤–æ–¥–∞ –¥–æ—Ö–æ–¥–∞:</b>',
        'enter_amount': 'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ –∑–∞ <b>{period}</b>:',
        'success': '‚úÖ –î–æ—Ö–æ–¥ <b>{amount:.2f}</b> —Ä—É–±. –∑–∞ <b>{period}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!',
    }

    AUTH = {
        'welcome': '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {full_name}!',
        'enter_code': '–í–≤–µ–¥–∏—Ç–µ –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:',
        'success': '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!',
        'exit': '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.',
        'user_info': (
            'üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>:\n\n'
            '<b>–ò–º—è</b>: {full_name};\n'
            '<b>Email</b>: {email}.'
        ),
        'payment_info': (
            '\n\nüí∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç—ë–∂</b>:\n'
            '–°—É–º–º–∞: {amount} —Ä—É–±.;\n'
            '–î–∞—Ç–∞: {date}.\n'
        )
    }

    PAYMENT = {
        'monthly_notification': 'üìÖ <b>–ï–ñ–ï–ú–ï–°–Ø–ß–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>\n',
        'tax_payment': '\n‚ñ™Ô∏è <b>–ù–∞–ª–æ–≥–∏:</b> {amount} —Ä—É–±.',
        'accounting_tariff': '\n‚ñ™Ô∏è <b>–¢–∞—Ä–∏—Ñ {tariff_name}:</b> {amount} —Ä—É–±.',
        'accounting_service': '\n‚ñ™Ô∏è <b>–î–æ–ø. —É—Å–ª—É–≥–∞ ¬´{service_name}¬ª:</b> {amount} —Ä—É–±.',
        'payment_details': (
            '\nüí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n'
            '\nüè¶ –ë–∞–Ω–∫: {bank}'
            '\nüìÑ –°—á–µ—Ç: {account}'
            '\nüë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient}'
            '\n‚ÑπÔ∏è –ò–ù–ù: {inn}'
            '\nüî¢ –ë–ò–ö: {bic}'
            '\nüèõ –ö–æ—Ä—Ä. —Å—á–µ—Ç: {corr_account}'
            '\nüìå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {purpose}'
        ),
        'total': '\nüí† <b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b> {total} —Ä—É–±.',
        'divider': '\n' + '-' * 30
    }

    GREETINGS = {
        'birthday': (
            'üéâ <b>–î–æ—Ä–æ–≥–æ–π(–∞—è) {full_name}!</b>\n\n'
            '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –í–∞—Å —Å –î–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéÇ\n'
            '–ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤ –≤ –±–∏–∑–Ω–µ—Å–µ –∏ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏!'
        ),
        'holiday': (
            'üéä <b>–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {full_name}!</b>\n\n'
            '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å {holiday_name}!\n'
            '–ü—É—Å—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫ –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ä–∞–¥–æ—Å—Ç—å –∏ —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!'
        )
    }

    ERROR = {
        'invalid_amount': '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É:',
        'invalid_code': '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.',
        'system_error': '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞.',
        'authorized': '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.',
        'not_user': '–í–∞—à Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.'
    }

    @staticmethod
    def format_date(iso_date: str) -> str:
        try:
            return datetime.fromisoformat(iso_date.replace('Z', '')).strftime('%d.%m.%Y %H:%M')
        except (ValueError, AttributeError):
            return iso_date or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'

    @staticmethod
    def build_payment_message(payment_details):
        message = [BotMessages.PAYMENT['monthly_notification']]

        if payment_details.get('taxAmount'):
            message.append(BotMessages.PAYMENT['tax_payment'].format(amount=payment_details['taxAmount']))
        
        if accounting := payment_details.get('accountingAmount'):
            if tariff := accounting.get('tariff'):
                message.append(BotMessages.PAYMENT['accounting_tariff'].format(tariff_name=tariff['name'], amount=tariff['amount']))
            if service := accounting.get('additionalService'):
                message.append(BotMessages.PAYMENT['accounting_service'].format(service_name=service['name'], amount=service['amount']))

        message.append(BotMessages.PAYMENT['divider'])
        message.append(BotMessages.PAYMENT['total'].format(total=payment_details.get('totalAmount', 0)))
        message.append(BotMessages.PAYMENT['divider'])
        message.append(BotMessages.PAYMENT['payment_details'].format(**BotMessages.get_requisites()))

        return ''.join(message)
    
    @staticmethod
    def get_requisites():
        return {
            'bank': os.getenv('PAYMENT_BANK_NAME'),
            'account': os.getenv('PAYMENT_ACCOUNT'),
            'recipient': os.getenv('PAYMENT_RECIPIENT'),
            'inn': os.getenv('PAYMENT_INN'),
            'bic': os.getenv('PAYMENT_BIC'),
            'corr_account': os.getenv('PAYMENT_CORR_ACCOUNT'),
            'purpose': os.getenv('PAYMENT_PURPOSE')
        }